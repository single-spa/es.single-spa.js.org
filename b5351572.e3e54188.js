(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{243:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return r})),n.d(a,"rightToc",(function(){return s})),n.d(a,"default",(function(){return p}));var t=n(1),i=n(9),c=(n(0),n(309)),r={id:"create-single-spa",title:"create-single-spa",sidebar_label:"create-single-spa"},s=[{value:"Installation and Usage",id:"installation-and-usage",children:[]},{value:"CLI arguments",id:"cli-arguments",children:[{value:"--dir",id:"--dir",children:[]},{value:"--moduleType",id:"--moduletype",children:[]},{value:"--framework",id:"--framework",children:[]},{value:"--layout",id:"--layout",children:[]}]},{value:"Project types",id:"project-types",children:[]},{value:"create-single-spa",id:"create-single-spa",children:[]},{value:"generator-single-spa",id:"generator-single-spa",children:[]},{value:"webpack-config-single-spa",id:"webpack-config-single-spa",children:[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"webpack-config-single-spa-react",id:"webpack-config-single-spa-react",children:[{value:"Installation",id:"installation-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"webpack-config-single-spa-ts",id:"webpack-config-single-spa-ts",children:[{value:"Installation",id:"installation-2",children:[]},{value:"Usage",id:"usage-2",children:[]}]},{value:"webpack-config-single-spa-react-ts",id:"webpack-config-single-spa-react-ts",children:[{value:"Installation",id:"installation-3",children:[]},{value:"Usage",id:"usage-3",children:[]}]}],o={rightToc:s},l="wrapper";function p(e){var a=e.components,n=Object(i.a)(e,["components"]);return Object(c.b)(l,Object(t.a)({},o,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Single-spa offers a CLI for those who prefer autogenerated and managed configurations for webpack, babel, jest, etc. You do not have to use the CLI in order to use single-spa."),Object(c.b)("p",null,"The CLI is called ",Object(c.b)("inlineCode",{parentName:"p"},"create-single-spa")," (",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/"}),"Github link"),"). It is primarily intended for the creation of new projects, but may also be useful for migrating existing projects (especially migrating CRA or frameworkless projects)."),Object(c.b)("h2",{id:"installation-and-usage"},"Installation and Usage"),Object(c.b)("p",null,"If you wish to have create-single-spa globally available, run the following in a terminal"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install --global create-single-spa\n\n# or\nyarn global add create-single-spa\n")),Object(c.b)("p",null,"Then run the following:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa\n")),Object(c.b)("p",null,"Alternatively, you may use create-single-spa without global installation:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm init single-spa\n\n# or\nnpx create-single-spa\n\n# or \nyarn create single-spa\n")),Object(c.b)("p",null,"This will open up a CLI prompt asking you what kind of project you want to create or update."),Object(c.b)("h2",{id:"cli-arguments"},"CLI arguments"),Object(c.b)("p",null,"You may pass arguments to create-single-spa like so:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"# Different ways of doing the same thing\ncreate-single-spa --framework react\nnpm init single-spa --framework react\nnpx create-single-spa --framework react\nyarn create single-spa --framework react\n")),Object(c.b)("p",null,"Here are the available CLI options:"),Object(c.b)("h3",{id:"--dir"},"--dir"),Object(c.b)("p",null,"You may specify which directory create-single-spa runs in through either of the following ways:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"# Two ways of doing the same thing\ncreate-single-spa my-dir\ncreate-single-spa --dir my-dir\n")),Object(c.b)("h3",{id:"--moduletype"},"--moduleType"),Object(c.b)("p",null,"You can specify which kind of microfrontend you are creating with the ",Object(c.b)("inlineCode",{parentName:"p"},"--moduleType")," CLI argument:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa --moduleType root-config\ncreate-single-spa --moduleType app-parcel\ncreate-single-spa --moduleType util-module\n")),Object(c.b)("h3",{id:"--framework"},"--framework"),Object(c.b)("p",null,"You can specify which framework you're using with the ",Object(c.b)("inlineCode",{parentName:"p"},"--framework")," CLI argument. Note that if you specify a framework that you may omit the ",Object(c.b)("inlineCode",{parentName:"p"},"--moduleType"),", as it is inferred to be ",Object(c.b)("inlineCode",{parentName:"p"},"app-parcel"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa --framework react\ncreate-single-spa --framework vue\ncreate-single-spa --framework angular\n")),Object(c.b)("h3",{id:"--layout"},"--layout"),Object(c.b)("p",null,"When generating a root config, the ",Object(c.b)("inlineCode",{parentName:"p"},"--layout")," CLI argument indicates that you want to use ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/layout-overview"}),"single-spa-layout")," in your root config."),Object(c.b)("h2",{id:"project-types"},"Project types"),Object(c.b)("p",null,"create-single-spa asks you if you'd like to create a single-spa application, a utility module, or a root-config. All three module types assume that you are using the ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/recommended-setup"}),"recommended setup"),"."),Object(c.b)("p",null,"If you select that you'd like to create a single-spa application, you will be prompted for which framework you'd like to choose. React is implemented with premade configurations for babel + webpack + jest. Angular is implemented with Angular CLI and ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:""}),"single-spa-angular"),". Vue is implemented with Vue CLI and ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/ecosystem/ecosystem-vue#vue-cli"}),"vue-cli-plugin-single-spa"),"."),Object(c.b)("h1",{id:"npm-packages"},"NPM packages"),Object(c.b)("p",null,"Within the create-single-spa repo, there are several NPM packages. The following sections document each package:"),Object(c.b)("h2",{id:"create-single-spa"},"create-single-spa"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/create-single-spa"}),"Github project")),Object(c.b)("p",null,"The core CLI, which invokes ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"#generator-single-spa"}),"generator-single-spa"),"."),Object(c.b)("h2",{id:"generator-single-spa"},"generator-single-spa"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/generator-single-spa"}),"Github project")),Object(c.b)("p",null,"A ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://yeoman.io/"}),"Yeoman generator")," that prompts the user and then creates files. This is primarily invoked via the create-single-spa CLI, but can also be ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://yeoman.io/authoring/composability.html"}),"composed")," if you'd like to customize it."),Object(c.b)("h2",{id:"webpack-config-single-spa"},"webpack-config-single-spa"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa"}),"Github project")),Object(c.b)("p",null,"A shareable, customizable webpack config that is used for utility modules and single-spa applications."),Object(c.b)("h3",{id:"installation"},"Installation"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa webpack-merge\n\n# or\nyarn add --dev webpack-config-single-spa webpack-merge\n")),Object(c.b)("h3",{id:"usage"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")),Object(c.b)("h2",{id:"webpack-config-single-spa-react"},"webpack-config-single-spa-react"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa-react"}),"Github project")),Object(c.b)("p",null,"A shareable, customizable webpack config that adds react-specific configuration to ",Object(c.b)("inlineCode",{parentName:"p"},"webpack-config-single-spa"),"."),Object(c.b)("h3",{id:"installation-1"},"Installation"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa-react webpack-merge\n\n# or\nyarn add --dev webpack-config-single-spa-react webpack-merge\n")),Object(c.b)("h3",{id:"usage-1"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa-react');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")),Object(c.b)("h2",{id:"webpack-config-single-spa-ts"},"webpack-config-single-spa-ts"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa-ts"}),"Github project")),Object(c.b)("p",null,"A shareable, customizable webpack config that adds typescript-specific configuration to ",Object(c.b)("inlineCode",{parentName:"p"},"webpack-config-single-spa"),". Note that webpack-config-single-spa-ts has a peerDependency on ",Object(c.b)("inlineCode",{parentName:"p"},"typescript"),"."),Object(c.b)("h3",{id:"installation-2"},"Installation"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa-ts webpack-merge\n\n# or\nyarn add --dev webpack-config-single-spa-ts webpack-merge\n")),Object(c.b)("h3",{id:"usage-2"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa-ts');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const singleSpaTs = require('webpack-config-single-spa-ts');\n\n// Alternatively, you may modify a webpack config directly\nconst myOtherWebpackConfig = {/* ... */}\nconst finalConfig = singleSpaDefaults.modifyConfig(myOtherWebpackConfig)\n")),Object(c.b)("h2",{id:"webpack-config-single-spa-react-ts"},"webpack-config-single-spa-react-ts"),Object(c.b)("p",null,Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa-react-ts"}),"Github project")),Object(c.b)("p",null,"A shareable, customizable webpack config that creates a webpack config that works with both react and typescript. Note that webpack-config-single-spa-react-ts simply merges the config from webpack-config-single-spa-react with that of webpack-config-single-spa-ts."),Object(c.b)("h3",{id:"installation-3"},"Installation"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa-react-ts webpack-merge\n\n# or\nyarn add --dev webpack-config-single-spa-react-ts webpack-merge\n")),Object(c.b)("h3",{id:"usage-3"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa-react-ts');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")))}p.isMDXComponent=!0},309:function(e,a,n){"use strict";n.d(a,"a",(function(){return s})),n.d(a,"b",(function(){return b}));var t=n(0),i=n.n(t),c=i.a.createContext({}),r=function(e){var a=i.a.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):Object.assign({},a,e)),n},s=function(e){var a=r(e.components);return i.a.createElement(c.Provider,{value:a},e.children)};var o="mdxType",l={inlineCode:"code",wrapper:function(e){var a=e.children;return i.a.createElement(i.a.Fragment,{},a)}},p=Object(t.forwardRef)((function(e,a){var n=e.components,t=e.mdxType,c=e.originalType,s=e.parentName,o=function(e,a){var n={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===a.indexOf(t)&&(n[t]=e[t]);return n}(e,["components","mdxType","originalType","parentName"]),p=r(n),b=t,g=p[s+"."+b]||p[b]||l[b]||c;return n?i.a.createElement(g,Object.assign({},{ref:a},o,{components:n})):i.a.createElement(g,Object.assign({},{ref:a},o))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var c=n.length,r=new Array(c);r[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[o]="string"==typeof e?e:t,r[1]=s;for(var b=2;b<c;b++)r[b]=n[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);