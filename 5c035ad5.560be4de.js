(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{184:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return l}));var n=a(1),r=a(9),i=(a(0),a(309)),o={id:"ecosystem",title:"The single-spa ecosystem",sidebar_label:"Overview"},p=[{value:"Help for frameworks",id:"help-for-frameworks",children:[]},{value:"Webpack 2+",id:"webpack-2",children:[]},{value:"SystemJS",id:"systemjs",children:[]},{value:"Webpack 1",id:"webpack-1",children:[]}],c={rightToc:p},s="wrapper";function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)(s,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The single-spa ecosystem is quickly growing to support as many frameworks and build tools as possible."),Object(i.b)("h2",{id:"help-for-frameworks"},"Help for frameworks"),Object(i.b)("p",null,"There is a growing number of projects that help you bootstrap, mount,\nand unmount your applications that are written with popular frameworks. Feel free\nto contribute to this list with your own project:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-react"}),"single-spa-react")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-vue"}),"single-spa-vue")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-angular"}),"single-spa-angular")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-angularjs"}),"single-spa-angularjs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-cycle"}),"single-spa-cycle")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-ember"}),"single-spa-ember")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-inferno"}),"single-spa-inferno")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-preact"}),"single-spa-preact")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-svelte"}),"single-spa-svelte")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-riot"}),"single-spa-riot")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-backbone"}),"single-spa-backbone"))),Object(i.b)("h2",{id:"webpack-2"},"Webpack 2+"),Object(i.b)("p",null,"With webpack 2+, we can take advantage of its support for ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://webpack.js.org/guides/code-splitting/"}),"code splitting")," with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://webpack.js.org/api/module-methods/#import"}),"import()"),"\nin order to easily lazy-load registered applications when they are needed. When registering\nregistered applications from inside of your single spa config, try the following for your\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"configuration#loading-function"}),"loading functions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\n\nregisterApplication('app-name', () => import('./my-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),Object(i.b)("h2",{id:"systemjs"},"SystemJS"),Object(i.b)("p",null,"Since SystemJS is a Promise-based ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://whatwg.github.io/loader"}),"loader"),", the way to\nlazy load your registered applications is straightforward:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\n\n// Import the registered application with a SystemJS.import call\nregisterApplication('app-name-1', () => SystemJS.import('./my-app.js'), activeWhen);\n\n// Alternatively, use the more out-of-date System.import (instead of SystemJS.import)\nregisterApplication('app-name-2', () => System.import('./my-other-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),Object(i.b)("h2",{id:"webpack-1"},"Webpack 1"),Object(i.b)("p",null,"With webpack 1, there is no support for Promise-based code splitting. Instead, we have to either wrap\na require.ensure in a Promise, or just give up on lazy loading completely."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\nimport app1 from './app1'; // Not lazy loading with code splitting :(\n\n// Giving up on lazy loading and code splitting :(\nregisterApplication('app-1', () => Promise.resolve(app1), activeWhen);\n\n// Still doing code splitting! But verbose :(\nregisterApplication('app-2', app2InPromise, activeWhen);\n\n/* Unfortunately, this logic cannot be abstracted into a generic\n * function that handles wrapping require.ensure in a promise for\n * any dynamically imported module. This is because webpack needs to\n * be able to statically analyze the code and find all of the require.ensure\n * calls at build-time, so you can't pass variables into require.ensure.\n */\nfunction app2InPromise() {\n    return new Promise((resolve, reject) => {\n        require.ensure(['./app-2.js'], require => {\n            try {\n                resolve(require('./app-2.js'));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    });\n}\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")))}l.isMDXComponent=!0},309:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return b}));var n=a(0),r=a.n(n),i=r.a.createContext({}),o=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},p=function(e){var t=o(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),l=o(a),b=n,m=l[p+"."+b]||l[b]||s[b]||i;return a?r.a.createElement(m,Object.assign({},{ref:t},c,{components:a})):r.a.createElement(m,Object.assign({},{ref:t},c))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=l;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:n,o[1]=p;for(var b=2;b<i;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}l.displayName="MDXCreateElement"}}]);